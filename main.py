import telebot
from telebot import types
from telebot.types import WebAppInfo, ShippingOption
import gspread
from datetime import date

bot = telebot.TeleBot("6961282310:AAEiGDvS0eFShH9YIxVUUq5yJgSObbDn9iw")
PAYMENTS_TOKEN = '1832575495:TEST:c3800b2274e49496052d96246e70a767bb533cbbe4083799216cb2d37e6b3d3c'
keyboard = WebAppInfo(url='https://heyartemno.github.io/webappmenu/')
googlesheetl = 'https://docs.google.com/spreadsheets/d/1sdRZojd4lnGg94NSEiA-0Xbt8IJlLD-73N3KdhoEKR4/edit#gid=0'
gc = gspread.service_account(filename='webapp-403514-3a36d5522e92.json')
description = "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ê–î–†–ï–° 2!"

PRICE = {
    '1_3': [types.LabeledPrice(label='–ó–µ—Ñ–∏—Ä (3—à—Ç)', amount=100 * 3 * 100)],
    '1_6': [types.LabeledPrice(label='–ó–µ—Ñ–∏—Ä (6—à—Ç)', amount=100 * 6 * 100)],
    '1_9': [types.LabeledPrice(label='–ó–µ—Ñ–∏—Ä (9—à—Ç)', amount=100 * 9 * 100)],
    '2': [types.LabeledPrice(label='–ú–∞—Ä—à–º–µ–ª–ª–æ—É', amount=120*100)],
    '3': [types.LabeledPrice(label='–®–æ–∫–æ–ª–∞–¥–Ω–æ–µ –ø–µ—á–µ–Ω—å–µ', amount=120*100)],
    '4': [types.LabeledPrice(label='–§–∏—Å—Ç–∞—à–∫–æ–≤–æ–µ –ø–µ—á–µ–Ω—å–µ', amount=120*100)],
    '5': [types.LabeledPrice(label='–ë–µ–∑–µ', amount=100*100)],
    '6': [types.LabeledPrice(label='–ò—Ä–∏—Å–∫–∞', amount=120*100)]
}
LABELS = {
    '1_3': '–ó–µ—Ñ–∏—Ä (3—à—Ç)',
    '1_6': '–ó–µ—Ñ–∏—Ä (6—à—Ç)',
    '1_9': '–ó–µ—Ñ–∏—Ä (9—à—Ç)',
}

IMAGES = {
    '1_3': 'https://heyartemno.github.io/webappmenu/images/zefir.jpg',
    '1_6': 'https://heyartemno.github.io/webappmenu/images/zefir.jpg',
    '1_9': 'https://heyartemno.github.io/webappmenu/images/zefir.jpg',
}

ID = {
    'id_order': 1
}

PICKUP_SHIPPING_OPTION = ShippingOption(
    id='0',
    title='–°–∞–º–æ–≤—ã–≤–æ–∑'
).add_price(types.LabeledPrice('–°–∞–º–æ–≤—ã–≤–æ–∑', 0))

RUSSIA_SHIPPING_OPTION = types.ShippingOption(
    id='500',
    title='–ü–æ –†–æ—Å—Å–∏–∏'
).add_price(types.LabeledPrice('–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–æ—Å—Å–∏–∏', 500*100))

VOLGOGRAD_SHIPPING_OPTION = ShippingOption(id='200', title='–ü–æ –í–æ–ª–≥–æ–≥—Ä–∞–¥—É')
VOLGOGRAD_SHIPPING_OPTION.add_price(types.LabeledPrice('–î–æ—Å—Ç–∞–≤–∫–∞', 200*100))


@bot.message_handler(commands=['start'])
def start(message):
    mess = f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>üëã \n\n–°–∞–º—ã–µ –≤–∫—É—Å–Ω—ã–µ —Å–ª–∞–¥–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µüòãüëá"
    markup = types.ReplyKeyboardMarkup()
    markup.add(types.KeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å', web_app=keyboard))
    bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)


@bot.message_handler(content_types=["web_app_data"])
def buy_process(web_app_message):
    ID['id_order'] += 1
    bot.send_invoice(web_app_message.chat.id,
                     title='–ó–∞–∫–∞–∑ ‚Ññ''{}'.format(ID['id_order']),
                     description=description,
                     provider_token=PAYMENTS_TOKEN,
                     currency='rub',
                     suggested_tip_amounts=[50*100, 100*100, 150*100],
                     max_tip_amount=150*100,
                     photo_url='{}'.format(IMAGES[f'{web_app_message.web_app_data.data}']),
                     photo_width=260,
                     photo_height=220,
                     need_name=True,
                     need_email=True,
                     need_phone_number=True,
                     is_flexible=True,
                     prices=PRICE[f'{web_app_message.web_app_data.data}'],
                     start_parameter='{}'.format(ID['id_order']),
                     invoice_payload='{}'.format(LABELS[f'{web_app_message.web_app_data.data}'])
                     )


@bot.pre_checkout_query_handler(lambda query: True)
def pre_checkout_process(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    print(pre_checkout_query)


@bot.shipping_query_handler(func=lambda query: True)
def process_shipping_query(shipping_query: types.ShippingQuery):
    if shipping_query.shipping_address.country_code != 'RU':
        return bot.answer_shipping_query(
            shipping_query.id,
            ok=False,
            error_message="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –ø–æ–∫–∞ –Ω–µ —Å–º–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –≤ —ç—Ç—É —Å—Ç—Ä–∞–Ω—Éüòî –ù–æ –º—ã –Ω–∞–¥ —ç—Ç–∏–º —Ä–∞–±–æ—Ç–∞–µ–º..."
        )

    shipping_options = [PICKUP_SHIPPING_OPTION]

    if shipping_query.shipping_address.country_code == 'RU':
        shipping_options.append(RUSSIA_SHIPPING_OPTION)

        if shipping_query.shipping_address.state == '–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
            shipping_options.append(VOLGOGRAD_SHIPPING_OPTION)

    bot.answer_shipping_query(
        shipping_query.id,
        ok=True,
        shipping_options=shipping_options
    )


@bot.message_handler(content_types=['successful_payment'])
def successful_payment(message: types.Message):
    id_order = ID['id_order']
    order = message.successful_payment.invoice_payload
    username = message.from_user.username
    name = message.successful_payment.order_info.name
    phone_number = message.successful_payment.order_info.phone_number
    email = message.successful_payment.order_info.email
    state = message.successful_payment.order_info.shipping_address.state
    city = message.successful_payment.order_info.shipping_address.city
    street_line1 = message.successful_payment.order_info.shipping_address.street_line1
    street_line2 = message.successful_payment.order_info.shipping_address.street_line2
    post_code = message.successful_payment.order_info.shipping_address.post_code
    summ = message.successful_payment.total_amount // 100
    today = date.today().strftime("%d.%m.%y")
    shipping = message.successful_payment.shipping_option_id

    sh = gc.open_by_url(googlesheetl)
    sh.sheet1.append_row(
        [today, id_order, username, name, phone_number, order, summ, email, shipping,
         state, city, street_line1, street_line2, post_code], table_range='A1')
    bot.send_message(message.chat.id,
                     f"<b>–ó–∞–∫–∞–∑ {ID['id_order']}</b> –Ω–∞ —Å—É–º–º—É <b>{message.successful_payment.total_amount // 100}"
                     f" {message.successful_payment.currency}</b> –æ—Ñ–æ—Ä–º–ª–µ–Ω", parse_mode='html')


@bot.message_handler(content_types=["text"])
def date_order(message: types.Message):
    mess_text = f"–î–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ‚ò∫Ô∏èüëá"
    markup = types.ReplyKeyboardMarkup()
    markup.add(types.KeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å', web_app=keyboard))
    bot.send_message(message.chat.id, mess_text, parse_mode='html', reply_markup=markup)


bot.polling(none_stop=True)
